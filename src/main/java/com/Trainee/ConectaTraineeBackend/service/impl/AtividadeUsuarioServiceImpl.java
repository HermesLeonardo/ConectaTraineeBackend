package com.Trainee.ConectaTraineeBackend.service.impl;

import com.Trainee.ConectaTraineeBackend.model.Atividade;
import com.Trainee.ConectaTraineeBackend.model.Usuario;
import com.Trainee.ConectaTraineeBackend.repository.AtividadeRepository;
import com.Trainee.ConectaTraineeBackend.repository.UsuarioRepository;
import com.Trainee.ConectaTraineeBackend.service.AtividadeUsuarioService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Optional;
import java.util.Set;

@Service
public class AtividadeUsuarioServiceImpl implements AtividadeUsuarioService {

    private static final Logger logger = LoggerFactory.getLogger(AtividadeUsuarioServiceImpl.class);

    @Autowired
    private AtividadeRepository atividadeRepository;

    @Autowired
    private UsuarioRepository usuarioRepository;

    @Override
    public Atividade adicionarUsuarios(Long idAtividade, Set<Usuario> usuarios) {
        logger.info("üîÑ Adicionando usu√°rios √† atividade ID: {}", idAtividade);

        Optional<Atividade> atividadeOptional = atividadeRepository.findById(idAtividade);
        if (atividadeOptional.isEmpty()) {
            logger.error("‚ùå Atividade ID {} n√£o encontrada!", idAtividade);
            throw new RuntimeException("Atividade n√£o encontrada!");
        }

        Atividade atividade = atividadeOptional.get();
        atividade.getUsuariosResponsaveis().addAll(usuarios);

        // üîπ Garante que os usu√°rios sejam salvos corretamente na tabela `atividades_usuarios`
        Atividade atividadeSalva = atividadeRepository.save(atividade);

        logger.info("‚úÖ Usu√°rios adicionados √† atividade '{}': {} usu√°rios vinculados.",
                atividade.getNome(), atividadeSalva.getUsuariosResponsaveis().size());

        return atividadeSalva;
    }

    @Override
    public Atividade removerUsuario(Long idAtividade, Long idUsuario) {
        logger.info("üîÑ Removendo usu√°rio ID {} da atividade ID {}", idUsuario, idAtividade);

        Optional<Atividade> atividadeOptional = atividadeRepository.findById(idAtividade);
        Optional<Usuario> usuarioOptional = usuarioRepository.findById(idUsuario);

        if (atividadeOptional.isEmpty() || usuarioOptional.isEmpty()) {
            logger.error("‚ùå Atividade ID {} ou Usu√°rio ID {} n√£o encontrado!", idAtividade, idUsuario);
            throw new RuntimeException("Atividade ou usu√°rio n√£o encontrado!");
        }

        Atividade atividade = atividadeOptional.get();
        Usuario usuario = usuarioOptional.get();
        atividade.getUsuariosResponsaveis().remove(usuario);

        Atividade atividadeAtualizada = atividadeRepository.save(atividade);
        logger.info("‚úÖ Usu√°rio ID {} removido da atividade '{}'", idUsuario, atividade.getNome());

        return atividadeAtualizada;
    }

    @Override
    public Set<Usuario> listarUsuarios(Long idAtividade) {
        logger.info("üìå Listando usu√°rios respons√°veis pela atividade ID {}", idAtividade);

        Optional<Atividade> atividadeOptional = atividadeRepository.findById(idAtividade);
        if (atividadeOptional.isEmpty()) {
            logger.error("‚ùå Atividade ID {} n√£o encontrada!", idAtividade);
            throw new RuntimeException("Atividade n√£o encontrada!");
        }

        Set<Usuario> usuarios = atividadeOptional.get().getUsuariosResponsaveis();
        logger.info("‚úÖ {} usu√°rios encontrados na atividade ID {}", usuarios.size(), idAtividade);

        return usuarios;
    }
}
